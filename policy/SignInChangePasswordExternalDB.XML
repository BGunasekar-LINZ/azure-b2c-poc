<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!-- Collecti User input-->
<TrustFrameworkPolicy
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns="http://schemas.microsoft.com/online/cpim/schemas/2013/06"
    PolicySchemaVersion="0.3.0.0"
    TenantId="devoio.onmicrosoft.com"
    PolicyId="B2C_1A_ChangePasswordCustomPolicy"
    PublicPolicyUri="http://yourtenant.onmicrosoft.com/B2C_1A_ChangePasswordCustomPolicy">

    <BuildingBlocks>
        <!-- Building Blocks Here-->
        <ClaimsSchema>
            <ClaimType Id="objectId">
                <DisplayName>unique object Id for subject of the claims being returned</DisplayName>
                <DataType>string</DataType>
            </ClaimType>

            <ClaimType Id="message">
                <DisplayName>Will hold Hello World message</DisplayName>
                <DataType>string</DataType>
            </ClaimType>

            <ClaimType Id="givenName">
                <DisplayName>Given Name</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>Your given name (also known as first name).</UserHelpText>
                <UserInputType>TextBox</UserInputType>
            </ClaimType>

            <ClaimType Id="surname">
                <DisplayName>Surname</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>Your surname (also known as family name or last name).</UserHelpText>
                <UserInputType>TextBox</UserInputType>
            </ClaimType>

            <ClaimType Id="displayName">
                <DisplayName>Display Name</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>Your display name.</UserHelpText>
                <UserInputType>TextBox</UserInputType>
            </ClaimType>

            <ClaimType Id="userName">
                <DisplayName>User Name</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>LINZ user name.</UserHelpText>
                <UserInputType>TextBox</UserInputType>
            </ClaimType>

            <ClaimType Id="password">
                <DisplayName>Password</DisplayName>
                <DataType>string</DataType>
                <AdminHelpText>Enter password</AdminHelpText>
                <UserHelpText>LINZ password.</UserHelpText>
                <UserInputType>Password</UserInputType>
                <PredicateValidationReference Id="StrongPassword" />
            </ClaimType>

            <ClaimType Id="email">
                <DisplayName>Email Address</DisplayName>
                <DataType>string</DataType>
                <DefaultPartnerClaimTypes>
                    <Protocol Name="OpenIdConnect" PartnerClaimType="email" />
                </DefaultPartnerClaimTypes>
                <UserHelpText>Your email address. </UserHelpText>
                <UserInputType>TextBox</UserInputType>
                <Restriction>
                    <Pattern RegularExpression="^[a-zA-Z0-9.!#$%&amp;&apos;^_`{}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$"
                        HelpText="Please enter a valid email address something like maurice@contoso.com" />
                </Restriction>
            </ClaimType>

            <ClaimType Id="userPrincipalName">
                <DisplayName>UserPrincipalName</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>Your user name as stored in the Azure Active Directory.</UserHelpText>
            </ClaimType>

            <ClaimType Id="passwordPolicies">
                <DisplayName>Password Policies</DisplayName>
                <DataType>string</DataType>
                <UserHelpText>Password policies used by Azure AD to determine password strength, expiry etc.</UserHelpText>
            </ClaimType>

            <ClaimType Id="displayButton">
                <DisplayName>Display Button</DisplayName>
                <DataType>string</DataType>
                <UserInputType>Button</UserInputType>
            </ClaimType>

            <ClaimType Id="textPassword">
                <DataType>string</DataType>
            </ClaimType>

            <ClaimType Id="textOldPassword">
                <DataType>string</DataType>
            </ClaimType>

            <ClaimType Id="oldPassword">
                <DisplayName>Old Password</DisplayName>
                <DataType>string</DataType>
                <AdminHelpText>Enter old password</AdminHelpText>
                <UserHelpText>LINZ old password.</UserHelpText>
                <UserInputType>Password</UserInputType>
                <PredicateValidationReference Id="StrongPassword" />
            </ClaimType>

            <ClaimType Id="newPassword">
                <DisplayName>New Password</DisplayName>
                <DataType>string</DataType>
                <AdminHelpText>Enter new password</AdminHelpText>
                <UserHelpText>LINZ new password.</UserHelpText>
                <UserInputType>Password</UserInputType>
                <PredicateValidationReference Id="StrongPassword" />
            </ClaimType>

            <ClaimType Id="confirmPassword">
                <DisplayName>Confirm Password</DisplayName>
                <DataType>string</DataType>
                <AdminHelpText>Enter confirm password</AdminHelpText>
                <UserHelpText>LINZ confirm password.</UserHelpText>
                <UserInputType>Password</UserInputType>
                <PredicateValidationReference Id="StrongPassword" />
            </ClaimType>

            <ClaimType Id="isValidOldPassword">
                <DataType>boolean</DataType>
            </ClaimType>

            <ClaimType Id="isValidConfirmPassword">
                <DataType>boolean</DataType>
            </ClaimType>

            <ClaimType Id="passwordUpdated">
                <DataType>boolean</DataType>
            </ClaimType>
        </ClaimsSchema>

        <Predicates>
            <Predicate Id="IsLengthBetween8And64" Method="IsLengthRange"
                HelpText="The password must be between 8 and 64 characters.">
                <Parameters>
                    <Parameter Id="Minimum">8</Parameter>
                    <Parameter Id="Maximum">64</Parameter>
                </Parameters>
            </Predicate>

            <Predicate Id="Lowercase" Method="IncludesCharacters" HelpText="a lowercase letter">
                <Parameters>
                    <Parameter Id="CharacterSet">a-z</Parameter>
                </Parameters>
            </Predicate>

            <Predicate Id="Uppercase" Method="IncludesCharacters" HelpText="an uppercase letter">
                <Parameters>
                    <Parameter Id="CharacterSet">A-Z</Parameter>
                </Parameters>
            </Predicate>

            <Predicate Id="Number" Method="IncludesCharacters" HelpText="a digit">
                <Parameters>
                    <Parameter Id="CharacterSet">0-9</Parameter>
                </Parameters>
            </Predicate>

            <Predicate Id="Symbol" Method="IncludesCharacters" HelpText="a symbol">
                <Parameters>
                    <Parameter Id="CharacterSet">@#$%^&amp;*\-_+=[]{}|\\:',.?/`~"();!</Parameter>
                </Parameters>
            </Predicate>

            <Predicate Id="PIN" Method="MatchesRegex" HelpText="The password must be numbers only.">
                <Parameters>
                    <Parameter Id="RegularExpression">^[0-9]+$</Parameter>
                </Parameters>
            </Predicate>

            <Predicate Id="AllowedAADCharacters" Method="MatchesRegex" HelpText="An invalid character was provided.">
                <Parameters>
                    <Parameter Id="RegularExpression">(^([0-9A-Za-z\d@#$%^&amp;*\-_+=[\]{}|\\:',?/`~"();!
                        ]|(\.(?!@)))+$)|(^$)</Parameter>
                </Parameters>
            </Predicate>

            <Predicate Id="DisallowedWhitespace" Method="MatchesRegex"
                HelpText="The password must not begin or end with a whitespace character.">
                <Parameters>
                    <Parameter Id="RegularExpression">(^\S.*\S$)|(^\S+$)|(^$)</Parameter>
                </Parameters>
            </Predicate>
        </Predicates>

        <PredicateValidations>
            <PredicateValidation Id="SimplePassword">
                <PredicateGroups>
                    <PredicateGroup Id="DisallowedWhitespaceGroup">
                        <PredicateReferences>
                            <PredicateReference Id="DisallowedWhitespace" />
                        </PredicateReferences>
                    </PredicateGroup>
                    <!-- <PredicateGroup Id="AllowedCharactersGroup">
                                <PredicateReferences>
                                    <PredicateReference Id="AllowedCharacters"/>
                                </PredicateReferences>
                            </PredicateGroup> -->
                    <PredicateGroup Id="LengthGroup">
                        <PredicateReferences>
                            <PredicateReference Id="IsLengthBetween8And64" />
                        </PredicateReferences>
                    </PredicateGroup>
                </PredicateGroups>
            </PredicateValidation>
            <PredicateValidation Id="StrongPassword">
                <PredicateGroups>
                    <PredicateGroup Id="DisallowedWhitespaceGroup">
                        <PredicateReferences>
                            <PredicateReference Id="DisallowedWhitespace" />
                        </PredicateReferences>
                    </PredicateGroup>
                    <!-- <PredicateGroup Id="AllowedCharactersGroup">
                                <PredicateReferences>
                                    <PredicateReference Id="AllowedCharacters"/>
                                </PredicateReferences>
                            </PredicateGroup> -->
                    <PredicateGroup Id="LengthGroup">
                        <PredicateReferences>
                            <PredicateReference Id="IsLengthBetween8And64" />
                        </PredicateReferences>
                    </PredicateGroup>
                    <PredicateGroup Id="CharacterClasses">
                        <UserHelpText>The password must have at least 3 of the following:</UserHelpText>
                        <PredicateReferences MatchAtLeast="3">
                            <PredicateReference Id="Lowercase" />
                            <PredicateReference Id="Uppercase" />
                            <PredicateReference Id="Number" />
                            <PredicateReference Id="Symbol" />
                        </PredicateReferences>
                    </PredicateGroup>
                </PredicateGroups>
            </PredicateValidation>
            <PredicateValidation Id="CustomPassword">
                <PredicateGroups>
                    <PredicateGroup Id="DisallowedWhitespaceGroup">
                        <PredicateReferences>
                            <PredicateReference Id="DisallowedWhitespace" />
                        </PredicateReferences>
                    </PredicateGroup>
                    <!-- <PredicateGroup Id="AllowedCharactersGroup">
                                <PredicateReferences>
                                    <PredicateReference Id="AllowedCharacters"/>
                                </PredicateReferences>
                            </PredicateGroup> -->
                </PredicateGroups>
            </PredicateValidation>
        </PredicateValidations>

        <ClaimsTransformations>
            <ClaimsTransformation Id="ThrowIfIsNotValidOldPassword"
                TransformationMethod="AssertBooleanClaimIsEqualToValue">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="isValidOldPassword" TransformationClaimType="inputClaim" />
                </InputClaims>
                <InputParameters>
                    <InputParameter Id="valueToCompareTo" DataType="boolean" Value="true" />
                </InputParameters>
            </ClaimsTransformation>

            <ClaimsTransformation Id="ThrowIfIsNotValidConfirmPassword"
                TransformationMethod="AssertBooleanClaimIsEqualToValue">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="isValidConfirmPassword" TransformationClaimType="inputClaim" />
                </InputClaims>
                <InputParameters>
                    <InputParameter Id="valueToCompareTo" DataType="boolean" Value="true" />
                </InputParameters>
            </ClaimsTransformation>

            <ClaimsTransformation Id="CheckIfIsValidOldPassword" TransformationMethod="CompareClaims">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="textPassword" TransformationClaimType="inputClaim1" />
                    <InputClaim ClaimTypeReferenceId="textOldPassword" TransformationClaimType="inputClaim2" />
                </InputClaims>
                <InputParameters>
                    <InputParameter Id="operator" DataType="string" Value="equal" />
                    <InputParameter Id="ignoreCase" DataType="string" Value="false" />
                </InputParameters>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="isValidOldPassword" TransformationClaimType="outputClaim" />
                </OutputClaims>
            </ClaimsTransformation>

            <ClaimsTransformation Id="CheckIfIsValidConfirmPassword" TransformationMethod="CompareClaims">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="newPassword" TransformationClaimType="inputClaim1" />
                    <InputClaim ClaimTypeReferenceId="confirmPassword" TransformationClaimType="inputClaim2" />
                </InputClaims>
                <InputParameters>
                    <InputParameter Id="operator" DataType="string" Value="equal" />
                    <InputParameter Id="ignoreCase" DataType="string" Value="false" />
                </InputParameters>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="isValidConfirmPassword" TransformationClaimType="outputClaim" />
                </OutputClaims>
            </ClaimsTransformation>

            <ClaimsTransformation Id="GenerateRandomObjectIdTransformation" TransformationMethod="CreateRandomString">
                <InputParameters>
                    <InputParameter Id="randomGeneratorType" DataType="string" Value="GUID" />
                </InputParameters>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="objectId" TransformationClaimType="outputClaim" />
                </OutputClaims>
            </ClaimsTransformation>

            <ClaimsTransformation Id="CreateDisplayNameTransformation" TransformationMethod="FormatStringMultipleClaims">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="givenName" TransformationClaimType="inputClaim1" />
                    <InputClaim ClaimTypeReferenceId="surname" TransformationClaimType="inputClaim2" />
                </InputClaims>
                <InputParameters>
                    <InputParameter Id="stringFormat" DataType="string" Value="{0} {1}" />
                </InputParameters>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="displayName" TransformationClaimType="outputClaim" />
                </OutputClaims>
            </ClaimsTransformation>

            <ClaimsTransformation Id="textPasswordTransformation" TransformationMethod="FormatStringClaim">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="password" TransformationClaimType="inputClaim" />
                </InputClaims>
                <InputParameters>
                    <InputParameter Id="stringFormat" DataType="string" Value="{0}" />
                </InputParameters>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="textPassword" TransformationClaimType="outputClaim" />
                </OutputClaims>
            </ClaimsTransformation>

            <ClaimsTransformation Id="textOldPasswordTransformation" TransformationMethod="FormatStringClaim">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="oldPassword" TransformationClaimType="inputClaim" />
                </InputClaims>
                <InputParameters>
                    <InputParameter Id="stringFormat" DataType="string" Value="{0}" />
                </InputParameters>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="textOldPassword" TransformationClaimType="outputClaim" />
                </OutputClaims>
            </ClaimsTransformation>

            <ClaimsTransformation Id="CreateMessageTransformation" TransformationMethod="FormatStringClaim">
                <InputClaims>
                    <InputClaim ClaimTypeReferenceId="displayName" TransformationClaimType="inputClaim" />
                </InputClaims>
                <InputParameters>
                    <InputParameter Id="stringFormat" DataType="string" Value="Hello {0}" />
                </InputParameters>
                <OutputClaims>
                    <OutputClaim ClaimTypeReferenceId="message" TransformationClaimType="outputClaim" />
                </OutputClaims>
            </ClaimsTransformation>
        </ClaimsTransformations>

        <ContentDefinitions>
            <ContentDefinition Id="SelfAssertedContentDefinition">
                <LoadUri>~/tenant/templates/AzureBlue/selfAsserted.cshtml</LoadUri>
                <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
                <DataUri>urn:com:microsoft:aad:b2c:elements:contract:selfasserted:2.1.7</DataUri>
            </ContentDefinition>
        </ContentDefinitions>
    </BuildingBlocks>

    <ClaimsProviders>
        <ClaimsProvider>
            <DisplayName>Token Issuer</DisplayName>
            <TechnicalProfiles>
                <TechnicalProfile Id="JwtIssuer">
                    <DisplayName>JWT Issuer</DisplayName>
                    <Protocol Name="None" />
                    <OutputTokenFormat>JWT</OutputTokenFormat>
                    <Metadata>
                        <Item Key="client_id">{service:te}</Item>
                        <Item Key="issuer_refresh_token_user_identity_claim_type">objectId</Item>
                        <Item Key="SendTokenResponseBodyWithJsonNumbers">true</Item>
                    </Metadata>
                    <CryptographicKeys>
                        <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
                        <Key Id="issuer_refresh_token_key" StorageReferenceId="B2C_1A_TokenEncryptionKeyContainer" />
                    </CryptographicKeys>
                </TechnicalProfile>
            </TechnicalProfiles>
        </ClaimsProvider>

        <ClaimsProvider>
            <!-- The technical profile(s) defined in this section is required by the framework to be included in all
            custom policies. -->
            <DisplayName>Trustframework Policy Engine TechnicalProfiles</DisplayName>
            <TechnicalProfiles>
                <TechnicalProfile Id="TpEngine_c3bd4fe2-1775-4013-b91d-35f16d377d13">
                    <DisplayName>Trustframework Policy Engine Default Technical Profile</DisplayName>
                    <Protocol Name="None" />
                    <Metadata>
                        <Item Key="url">{service:te}</Item>
                    </Metadata>
                </TechnicalProfile>
            </TechnicalProfiles>
        </ClaimsProvider>

        <ClaimsProvider>
            <DisplayName>Technical Profiles to generate claims</DisplayName>
            <TechnicalProfiles>
                <TechnicalProfile Id="UserInputMessageClaimGenerator">
                    <DisplayName>User Message Claim Generator Technical Profile</DisplayName>
                    <Protocol Name="Proprietary"
                        Handler="Web.TPEngine.Providers.ClaimsTransformationProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="message" />
                    </OutputClaims>
                    <OutputClaimsTransformations>
                        <OutputClaimsTransformation ReferenceId="CreateMessageTransformation" />
                    </OutputClaimsTransformations>
                </TechnicalProfile>

                <TechnicalProfile Id="UserInputPassword">
                    <DisplayName>Copy Passsword Technical Profile</DisplayName>
                    <Protocol Name="Proprietary"
                        Handler="Web.TPEngine.Providers.ClaimsTransformationProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="textPassword" />
                    </OutputClaims>
                    <OutputClaimsTransformations>
                        <OutputClaimsTransformation ReferenceId="textPasswordTransformation" />
                    </OutputClaimsTransformations>
                </TechnicalProfile>

                <TechnicalProfile Id="UserInputOldPassword">
                    <DisplayName>Copy Passsword Technical Profile</DisplayName>
                    <Protocol Name="Proprietary"
                        Handler="Web.TPEngine.Providers.ClaimsTransformationProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="textOldPassword" />
                    </OutputClaims>
                    <OutputClaimsTransformations>
                        <OutputClaimsTransformation ReferenceId="textOldPasswordTransformation" />
                    </OutputClaimsTransformations>
                </TechnicalProfile>

                <TechnicalProfile Id="UserInputDisplayNameGenerator">
                    <DisplayName>Display Name Claim Generator Technical Profile</DisplayName>
                    <Protocol Name="Proprietary"
                        Handler="Web.TPEngine.Providers.ClaimsTransformationProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="displayName" />
                    </OutputClaims>
                    <OutputClaimsTransformations>
                        <OutputClaimsTransformation ReferenceId="CreateDisplayNameTransformation" />
                    </OutputClaimsTransformations>
                </TechnicalProfile>

                <TechnicalProfile Id="CheckOdlPasswordViaClaimsTransformationChecker">
                    <DisplayName>Validate Old password</DisplayName>
                    <Protocol Name="Proprietary"
                        Handler="Web.TPEngine.Providers.ClaimsTransformationProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="isValidOldPassword" />
                    </OutputClaims>
                    <OutputClaimsTransformations>
                        <OutputClaimsTransformation ReferenceId="CheckIfIsValidOldPassword" />
                        <OutputClaimsTransformation ReferenceId="ThrowIfIsNotValidOldPassword" />
                    </OutputClaimsTransformations>
                </TechnicalProfile>

                <TechnicalProfile Id="CheckConfirmPasswordViaClaimsTransformationChecker">
                    <DisplayName>Validate Confirm password</DisplayName>
                    <Protocol Name="Proprietary"
                        Handler="Web.TPEngine.Providers.ClaimsTransformationProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="isValidConfirmPassword" />
                    </OutputClaims>
                    <OutputClaimsTransformations>
                        <OutputClaimsTransformation ReferenceId="CheckIfIsValidConfirmPassword" />
                        <OutputClaimsTransformation ReferenceId="ThrowIfIsNotValidConfirmPassword" />
                    </OutputClaimsTransformations>
                </TechnicalProfile>
            </TechnicalProfiles>
        </ClaimsProvider>

        <ClaimsProvider>
            <DisplayName>Technical Profiles to collect user's details </DisplayName>
            <TechnicalProfiles>
                <TechnicalProfile Id="passwordCollector">
                    <DisplayName>Collect old and new password input Technical Profile</DisplayName>
                    <Protocol Name="Proprietary"
                        Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
                    <Metadata>
                        <Item Key="ContentDefinitionReferenceId">SelfAssertedContentDefinition</Item>
                    </Metadata>
                    <DisplayClaims>
                        <DisplayClaim ClaimTypeReferenceId="oldPassword" Required="true" />
                        <DisplayClaim ClaimTypeReferenceId="newPassword" Required="true" />
                        <DisplayClaim ClaimTypeReferenceId="confirmPassword" Required="true" />
                    </DisplayClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="oldPassword" />
                        <OutputClaim ClaimTypeReferenceId="newPassword" />
                        <OutputClaim ClaimTypeReferenceId="confirmPassword" />
                        <OutputClaim ClaimTypeReferenceId="passwordUpdated" />
                    </OutputClaims>
                    <ValidationTechnicalProfiles>
                        <ValidationTechnicalProfile ReferenceId="UserInputOldPassword" />
                        <ValidationTechnicalProfile ReferenceId="CheckOdlPasswordViaClaimsTransformationChecker" />
                        <ValidationTechnicalProfile ReferenceId="CheckConfirmPasswordViaClaimsTransformationChecker" />
                        <ValidationTechnicalProfile ReferenceId="changePasswordViaHttp" />
                    </ValidationTechnicalProfiles>
                </TechnicalProfile>

                <TechnicalProfile Id="UserInformationCollector">
                    <DisplayName>Collect User Input Technical Profile</DisplayName>
                    <Protocol Name="Proprietary"
                        Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
                    <Metadata>
                        <Item Key="ContentDefinitionReferenceId">SelfAssertedContentDefinition</Item>
                    </Metadata>
                    <DisplayClaims>
                        <DisplayClaim ClaimTypeReferenceId="userName" Required="true" />
                        <DisplayClaim ClaimTypeReferenceId="password" Required="true" />
                    </DisplayClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="userName" />
                        <OutputClaim ClaimTypeReferenceId="password" />
                        <OutputClaim ClaimTypeReferenceId="givenName" />
                        <OutputClaim ClaimTypeReferenceId="surname" />
                        <OutputClaim ClaimTypeReferenceId="email" />
                        <OutputClaim ClaimTypeReferenceId="displayName" />
                        <OutputClaim ClaimTypeReferenceId="objectId" />
                        <OutputClaim ClaimTypeReferenceId="textPassword" />
                    </OutputClaims>
                    <ValidationTechnicalProfiles>
                        <ValidationTechnicalProfile ReferenceId="ValidateUserViaHttp" />
                        <ValidationTechnicalProfile ReferenceId="UserInputDisplayNameGenerator" />
                        <ValidationTechnicalProfile ReferenceId="AAD-UserRead" />
                        <ValidationTechnicalProfile ReferenceId="AAD-UserWrite">
                            <Preconditions>
                                <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
                                    <Value>objectId</Value>
                                    <Action>SkipThisValidationTechnicalProfile</Action>
                                </Precondition>
                            </Preconditions>
                        </ValidationTechnicalProfile>
                        <ValidationTechnicalProfile ReferenceId="UserInputPassword" />
                    </ValidationTechnicalProfiles>
                    <!-- <EnabledForUserJourneys>OnClaimsExistence</EnabledForUserJourneys> -->
                </TechnicalProfile>
            </TechnicalProfiles>
        </ClaimsProvider>

        <ClaimsProvider>
            <DisplayName>HTTP Request Technical Profiles</DisplayName>
            <TechnicalProfiles>
                <TechnicalProfile Id="ValidateUserViaHttp">
                    <DisplayName>Check that the user has entered a valid user and password</DisplayName>
                    <Protocol Name="Proprietary"
                        Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
                    <Metadata>
                        <Item Key="ServiceUrl">https://mockuserstore1-jweng.b4a.run/users</Item>
                        <Item Key="SendClaimsIn">Body</Item>
                        <Item Key="AuthenticationType">None</Item>
                        <Item Key="AllowInsecureAuthInProduction">true</Item>
                    </Metadata>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="userName" PartnerClaimType="user" />
                        <InputClaim ClaimTypeReferenceId="password" PartnerClaimType="password" />
                    </InputClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="givenName" PartnerClaimType="givenName" />
                        <OutputClaim ClaimTypeReferenceId="surname" PartnerClaimType="surname" />
                        <OutputClaim ClaimTypeReferenceId="email" PartnerClaimType="email" />
                    </OutputClaims>
                </TechnicalProfile>

                <TechnicalProfile Id="changePasswordViaHttp">
                    <DisplayName>Call REST API to change/update password</DisplayName>
                    <Protocol Name="Proprietary"
                        Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
                    <Metadata>
                        <Item Key="ServiceUrl">https://mockuserstore1-jweng.b4a.run/users/changePassword</Item>
                        <Item Key="SendClaimsIn">Body</Item>
                        <Item Key="AuthenticationType">None</Item>
                        <Item Key="AllowInsecureAuthInProduction">true</Item>
                    </Metadata>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="userName" PartnerClaimType="user" />
                        <InputClaim ClaimTypeReferenceId="oldPassword" PartnerClaimType="OldPassword" />
                        <InputClaim ClaimTypeReferenceId="newPassword" PartnerClaimType="newPassword" />
                    </InputClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="passwordUpdated" PartnerClaimType="passwordChange" />
                    </OutputClaims>
                </TechnicalProfile>
            </TechnicalProfiles>
        </ClaimsProvider>

        <ClaimsProvider>
            <DisplayName>Azure AD Technical Profiles</DisplayName>
            <TechnicalProfiles>
                <!--You'll
                add you Azure AD Technical Profiles here-->
                <TechnicalProfile Id="AAD-UserWrite">
                    <DisplayName>Write user information to AAD</DisplayName>
                    <Protocol Name="Proprietary"
                        Handler="Web.TPEngine.Providers.AzureActiveDirectoryProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
                    <Metadata>
                        <Item Key="Operation">Write</Item>
                        <Item Key="RaiseErrorIfClaimsPrincipalAlreadyExists">true</Item>
                        <Item Key="UserMessageIfClaimsPrincipalAlreadyExists">The account already exists. Try to create another account</Item>
                    </Metadata>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="userName" PartnerClaimType="signInNames.userName"
                            Required="true" />
                    </InputClaims>
                    <PersistedClaims>
                        <PersistedClaim ClaimTypeReferenceId="email" PartnerClaimType="signInNames.userName" />
                        <PersistedClaim ClaimTypeReferenceId="displayName" />
                        <PersistedClaim ClaimTypeReferenceId="givenName" />
                        <PersistedClaim ClaimTypeReferenceId="surname" />
                        <PersistedClaim ClaimTypeReferenceId="passwordPolicies"
                            DefaultValue="DisablePasswordExpiration,DisableStrongPassword" />
                    </PersistedClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="objectId" />
                        <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
                        <OutputClaim ClaimTypeReferenceId="email" PartnerClaimType="signInNames.userName" />
                    </OutputClaims>
                </TechnicalProfile>
                <TechnicalProfile Id="AAD-UserRead">
                    <DisplayName>Read user from Azure AD storage</DisplayName>
                    <Protocol Name="Proprietary"
                        Handler="Web.TPEngine.Providers.AzureActiveDirectoryProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
                    <Metadata>
                        <Item Key="Operation">Read</Item>
                        <Item Key="RaiseErrorIfClaimsPrincipalAlreadyExists">false</Item>
                        <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">false</Item>
                    </Metadata>
                    <InputClaims>
                        <InputClaim ClaimTypeReferenceId="userName" PartnerClaimType="signInNames.userName"
                            Required="true" />
                    </InputClaims>
                    <OutputClaims>
                        <OutputClaim ClaimTypeReferenceId="objectId" />
                        <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
                        <OutputClaim ClaimTypeReferenceId="givenName" />
                        <OutputClaim ClaimTypeReferenceId="surname" />
                        <OutputClaim ClaimTypeReferenceId="displayName" />
                    </OutputClaims>
                </TechnicalProfile>
            </TechnicalProfiles>
        </ClaimsProvider>

    </ClaimsProviders>

    <UserJourneys>
        <!-- User Journeys Here-->
        <UserJourney Id="HelloWorldJourney">
            <OrchestrationSteps>
                <OrchestrationStep Order="1" Type="ClaimsExchange">
                    <ClaimsExchanges>
                        <ClaimsExchange Id="GetUserInformationClaimsExchange"
                            TechnicalProfileReferenceId="UserInformationCollector" />
                    </ClaimsExchanges>
                </OrchestrationStep>

                <OrchestrationStep Order="2" Type="ClaimsExchange">
                    <ClaimsExchanges>
                        <ClaimsExchange Id="ChangePasswordClaimsExchange"
                            TechnicalProfileReferenceId="passwordCollector" />
                    </ClaimsExchanges>
                </OrchestrationStep>

                <OrchestrationStep Order="3" Type="ClaimsExchange">
                    <ClaimsExchanges>
                        <ClaimsExchange Id="GetMessageClaimsExchange"
                            TechnicalProfileReferenceId="UserInputMessageClaimGenerator" />
                    </ClaimsExchanges>
                </OrchestrationStep>

                <OrchestrationStep Order="4" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
            </OrchestrationSteps>
        </UserJourney>
    </UserJourneys>

    <RelyingParty>
        <!-- 
                Relying Party Here that's your policy’s entry point
                Specify the User Journey to execute 
                Specify the claims to include in the token that is returned when the policy runs
            -->
        <DefaultUserJourney ReferenceId="HelloWorldJourney" />
        <TechnicalProfile Id="HelloWorldPolicyProfile">
            <DisplayName>Hello World Policy Profile</DisplayName>
            <Protocol Name="OpenIdConnect" />
            <OutputClaims>
                <OutputClaim ClaimTypeReferenceId="objectId" PartnerClaimType="sub" />
                <OutputClaim ClaimTypeReferenceId="displayName" />
                <OutputClaim ClaimTypeReferenceId="userName" />
                <OutputClaim ClaimTypeReferenceId="givenName" />
                <OutputClaim ClaimTypeReferenceId="surname" />
                <OutputClaim ClaimTypeReferenceId="email" />
                <OutputClaim ClaimTypeReferenceId="passwordUpdated" />
            </OutputClaims>
            <SubjectNamingInfo ClaimType="sub" />
        </TechnicalProfile>
    </RelyingParty>
</TrustFrameworkPolicy>